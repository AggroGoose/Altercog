// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid()) @db.VarChar(256)
  userId             String  @db.VarChar(256)
  type               String
  provider           String
  providerAccountId  String  @db.VarChar(256)
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Comment {
  id String @id @default(cuid())
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  createdAt DateTime @default(now())
  likes Int @default(0)
  content String
  likedBy CommentLikes[]
  replies Reply[]
}

model CommentLikes {
  comment Comment @relation(fields: [commentId], references: [id])
  commentId String
  user User @relation(fields: [userId], references: [id])
  userId String

  @@id([commentId, userId])
}

model Post {
  id String @id
  author User @relation(fields: [authorId], references: [authorId], onDelete: Cascade)
  authorId String
  audioLink String?
  likes Int @default(0)
  slug String @unique
  title String
  likedBy PostLikes[]
  favoritedBy PostFavorites[]
  comments Comment[]
  tags PostTags[]
}

model PostFavorites {
  post Post @relation(fields: [postId], references: [id])
  postId String
  user User @relation(fields: [userId], references: [id])
  userId String

  @@id([postId, userId])
}

model PostLikes {
  post Post @relation(fields: [postId], references: [id])
  postId String
  user User @relation(fields: [userId], references: [id])
  userId String

  @@id([postId, userId])
}

model Reply {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  createdAt DateTime @default(now())
  likes Int @default(0)
  content String
  likedBy ReplyLikes[]
}

model ReplyLikes {
  reply Reply @relation(fields: [replyId], references: [id])
  replyId String
  user User @relation(fields: [userId], references: [id])
  userId String

  @@id([replyId, userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tags {
  id String @id
  name String
  slug String @unique
  posts PostTags[]
}

model PostTags {
  post Post @relation(fields: [postId], references: [id])
  postId String
  slug String @unique
  tag Tags @relation(fields: [tagId], references: [id])
  tagId String

  @@id([postId, tagId])
}

model User {
  id String @id @default(cuid()) @db.VarChar(256)
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  intakeCompleted Boolean @default(false)
  subscribed Boolean @default(false)
  status String @default("free")
  isAdmin Boolean @default(false)
  isAuthor Boolean @default(false)
  authorId String? @unique
  created DateTime @default(now())
  darkMode Boolean @default(true)
  lastLogged DateTime @default(now())

  accounts Account[]
  comments Comment[]
  posts Post[]
  replies Reply[]
  sessions Session[]
  commentLikes CommentLikes[]
  postlikes PostLikes[]
  replyLikes ReplyLikes[]
  postFavorites PostFavorites[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}